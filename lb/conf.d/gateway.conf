upstream app_pool {
    least_conn;
    server 192.168.145.129:80 max_fails=3 fail_timeout=10s;
    server 192.168.145.131:80 max_fails=3 fail_timeout=10s;
    keepalive 32;
}

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name _;
    location / { return 301 https://$host$request_uri; }
}

server {
    listen 443 ssl http2;
    server_name _;

    ssl_certificate /etc/ssl/nginx/nginx.crt;
    ssl_certificate_key /etc/ssl/nginx/nginx.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_prefer_server_ciphers on;

    # security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-XSS-Protection "1; mode=block" always;

    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/gateway_error.log warn;

    # simple status endpoint
    location = /nginx_status {
        stub_status on;
        allow 127.0.0.1;
        allow 192.168.145.0/24;
        deny all;
    }

    # block common SQLi/XSS payloads in URI
    location ~* "(union.*select|select.*from|drop\s+table|insert\s+into|outfile|<script|javascript:|\.\./\.\.)" {
        return 403;
    }

    # block known bad user agents
    if ($http_user_agent ~* "(sqlmap|nikto|acunetix|masscan|fuzzer|nmap)") {
        return 403;
    }

    # Route /api/* to backend A explicitly (use backend IP directly)
    location ^~ /api/ {
        proxy_pass http://192.168.145.129:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        limit_req zone=ip_limit burst=20 nodelay;
        proxy_connect_timeout 3s;
    }

    # Cache static assets via proxy cache and set expiration
    location ~* \.(?:css|js|jpg|jpeg|png|gif|ico|svg|woff2?)$ {
        proxy_pass http://app_pool;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_cache STATIC;
        proxy_cache_valid 200 301 302 15m;
        expires 15m;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # default: load-balanced app pool
    location / {
        proxy_pass http://app_pool;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        limit_req zone=ip_limit burst=20 nodelay;
        proxy_next_upstream error timeout http_502 http_503 http_504;
    }

    # custom error page
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

